macro main {
    print10ln %10
}

macro init {
    zer %0
    zer %1
    inc %1

    mov %2 %1
    inc %2

    mov %5 %2
    sum %5 %2
    sum %5 %1

    mov %10 %5
    sum %10 %5

    mov %ASCII_ZERO %10
    mul %ASCII_ZERO %5
    sub %ASCII_ZERO %2 @never

    mov %ASCII_NL %10
}

# Unconditional jump to label M
macro jp M { jmp %0 %0 M; }

# Repeat `what` (N-S) times
# If S > N it will cause infinite iteration
macro rep S_rep N_rep what {
    mov %.u S_rep

    @.rep_loop
        jmp %.u N_rep @.rep_out
        what

        inc %.u
        jp @.rep_loop
    
    @.rep_out
}

# Repeat `what` (N-S) times
# `what` expands with index parameter [S; N-1]
# If S > N it will cause infinite iteration
macro repi S_repi N_repi what {
    mov %.u S_repi

    @.repi_loop
        jmp %.u N_repi @.repi_out
        what %.u

        inc %.u
        jp @.repi_loop
    
    @.repi_out
}

# Calculate X = X + Y
macro sum X Y {
    rep %0 Y {| inc X ;}
}

# Calculate X = X * Y
macro mul X Y {
    zer %.res
    rep %0 Y {| sum %\.res X ;}
    mov X %.res
}

# Calculate X = X - 1 if X > 0
#           X = 0     if X = 0
macro dec X {
    zer %.res
    rep %1 X {| inc %\.res ;}
    mov X %.res
}

# Calculate X = X - Y         if X >= Y
#           jump to M if X < Y
macro sub X Y M {
    mov %.x X
    mov %.y Y

    @.sub_loop
        jmp %.y %0 @.sub_out
        jmp %.x %0 M

        dec %.x
        dec %.y

        jp @.sub_loop

    @.sub_out
        mov X %.x
}

# Calculate X = X / Y if Y != 0
#           jump to M if Y == 0
macro div X Y M {
    jmp Y %0 M
    zer %.i

    @.div_loop
        sub X Y @.div_out
        inc %.i
        jp @.div_loop

    @.div_out
        mov X %.i
}

# Calculate X = X % Y if Y != 0
#           jump to M if Y == 0
macro mod X Y M {
    jmp Y %0 M

    @.mod_loop
        sub X Y @.mod_out
        jp @.mod_loop

    @.mod_out
}

# N = digit len of N in decimal
macro nod10 N {
    mov %.i %1

    @.nod10_loop
        jmp N %0 @.nod10_out
        div N %10 @never
        inc %.i

    @.nod10_out
        mov N %.i
}

# Outs N in decimal to console
macro print10 N {
    mov %.l N
    nod10 %.l

    repi %0 %.l { i |
        mov %.b %\.l
        sub %.b i @never

        mov %.n N

        rep %1 %.b {|
            div %\.n %10 @never
        }

        mod %.n %10 @never
        sum %.n %ASCII_ZERO
        
        out %.n
    }
}

# Outs N in decimal to console & '\n'
macro print10ln N {
    print10 N
    out %ASCII_NL
}


init
@main
main
@never
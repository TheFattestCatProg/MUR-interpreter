macro jmpA M {
    jmp %._ %._ M
}

macro rep N code {
    zer %.i

    @.loop

    jmp %.i N @.out
        code %.i
        inc %.i

        jmpA @.loop

    @.out
}

macro repSince S N code {
    mov %.i S

    @.loop

    jmp %.i N @.out
        code %.i
        inc %.i

        jmpA @.loop

    @.out
}

macro sum X Y {
    rep Y { i | inc X; }
}

macro dec X {
    zer %.0

    zer %.1
    inc %.1

    zer %.res

    jmp X %.0 @.out

        repSince %.1 X { i | inc %\.res; } # use outer-scope %.res
        mov X %.res

    @.out
}

macro sub X Y {
    rep Y { i | dec X; }
}

macro init {
    zer %0
    zer %1
    inc %1

    mov %2 %1
    inc %2

    mov %5 %2
    sum %5 %2
    sum %5 %1

    mov %10 %5
    sum %10 %5
}



macro main {
    mov %.x %5
    mov %.y %2

    sub %.x %.y

    out %.x
}


init
main